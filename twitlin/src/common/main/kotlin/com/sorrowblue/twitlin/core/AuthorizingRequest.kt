/*
 * (c) 2020-2021 SorrowBlue.
 */

package com.sorrowblue.twitlin.core

import com.github.aakira.napier.Napier
import com.sorrowblue.twitlin.utils.urlEncode

/**
 * Collecting parameters
You should be able to see that the header contains 7 key/value pairs, where the keys all begin with
the string `oauth_`. For any given Twitter API request, collecting these 7 values and creating a
similar header will allow you to specify authorization for the request.
 *
 * @param consumerKey The [consumerKey] identifies which application is making the
 * request. Obtain this value from the settings page for your
 * [Twitter app](https://developer.twitter.com/content/developer-twitter/en/docs/basics/developer-portal/guides/apps)
 * in the [developer portal](https://developer.twitter.com/content/developer-twitter/en/docs/basics/developer-portal/overview).
 * @param nonce The [nonce] parameter is a unique token your application should generate
 * for each unique request. Twitter will use this value to determine whether a request has been
 * submitted multiple times. The value for this request was generated by base64 encoding 32 bytes
 * of random data, and stripping out all non-word characters, but any approach which produces a
 * relatively random alphanumeric string should be OK here.
 * @param signature The [signature] parameter contains a value which is generated by
 * running all of the other request parameters and two secret values through a signing algorithm.
 * The purpose of the signature is so that Twitter can verify that the request has not been modified
 * in transit, verify the application sending the request, and verify that the application has
 * authorization to interact with the user’s account.
 *
 * The process for calculating the oauth_signature for this request is described in
 * [calculateSignatureBase64].
 * @param timestamp The [timestamp] parameter indicates when the request was created. This value
 * should be the number of seconds since the Unix epoch at the point the request is generated, and
 * should be easily generated in most programming languages. Twitter will reject requests which were
 * created too far in the past, so it is important to keep the clock of the computer generating
 * requests in sync with NTP.
 * @param oauthToken The [oauthToken] parameter typically represents a user’s permission to share
 * access to their account with your application. There are a few authentication requests where this
 * value is not passed or is a different form of token, but those are covered in detail in
 * [Obtaining access tokens](https://developer.twitter.com/en/docs/basics/authentication/oauth-1-0a).
 * For most general-purpose requests, you will use what is referred to as an **access token**.
 *
 * You can generate a valid [access token](https://developer.twitter.com/en/docs/basics/authentication/oauth-1-0a)
 * for your account on the settings page for your
 * [Twitter app](https://developer.twitter.com/content/developer-twitter/en/docs/basics/developer-portal/guides/apps)
 * on the [developer portal](https://developer.twitter.com/content/developer-twitter/en/docs/basics/developer-portal/overview).
 * @param params TODO
 * @return TODO
 */
internal fun collectingParameters(
    consumerKey: String,
    nonce: String,
    signature: String,
    timestamp: String,
    oauthToken: String?,
    params: List<Pair<String, String>>
): List<Pair<String, String>> {
    return listOf(
        "oauth_consumer_key" to consumerKey,
        "oauth_nonce" to nonce,
        "oauth_signature" to signature,
        "oauth_signature_method" to "HMAC-SHA1",
        "oauth_timestamp" to timestamp,
        "oauth_version" to "1.0"
    ).run { oauthToken?.let { plus("oauth_token" to oauthToken) } ?: this }
        .plus(params.takeWhile { it.first.startsWith("oauth_") })
        .sortedBy { it.first }
}

/**
 * To build the header string, imagine writing to a string named DST.
 * 1. Append the string `OAuth ` (including the space at the end) to DST.
 * 1. For each key/value pair of the 7 parameters listed above:
 *     1. [Percent encode](https://developer.twitter.com/en/docs/basics/authentication/guides/percent-encoding-parameters.html)
 *     the key and append it to DST.
 *     1. Append the equals character `=` to DST.
 *     1. Append a double quote `”` to DST.
 *     1. [Percent encode](https://developer.twitter.com/en/docs/basics/authentication/guides/percent-encoding-parameters.html)
 *     the value and append it to DST.
 *     1. Append a double quote `”` to DST.
 *     1. If there are key/value pairs remaining, append a comma `,` and a space ` ` to DST.
 *
 * Pay particular attention to the percent encoding of the values when building this string.
 * For example, the `oauth_signature` value of `tnnArxj06cWHq44gCs1OSKk/jLY=` must be encoded as
 * `tnnArxj06cWHq44gCs1OSKk%2FjLY%3D`.
 *
 * @param params TODO
 * @return TODO
 */
internal fun buildHeaderString(params: List<Pair<String, String>>): String {
    val dst = StringBuilder()
    dst.append("OAuth ")
    params.forEachIndexed { index, it ->
        dst.append(it.first.urlEncode())
        dst.append("=")
        dst.append("\"")
        dst.append(it.second.urlEncode())
        dst.append("\"")
        if (index != params.lastIndex) {
            dst.append(", ")
        }
    }
    return dst.toString().also { Napier.i("buildHeaderString() = $it") }
}
